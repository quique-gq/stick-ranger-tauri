interface ChildProcess {
    code: number | null;
    signal: number | null;
    stdout: string;
    stderr: string;
}
declare class EventEmitter<E> {
    eventListeners: {
        [key: string]: Array<(arg: any) => void>;
    };
    private addEventListener;
    _emit(event: E, payload: any): void;
    on(event: E, handler: (arg: any) => void): EventEmitter<E>;
}
declare class Child {
    pid: number;
    constructor(pid: number);
    write(data: string | number[]): Promise<void>;
    kill(): Promise<void>;
}
declare class Command extends EventEmitter<'close' | 'error'> {
    program: string;
    args: string[];
    sidecar: boolean;
    stdout: EventEmitter<"data">;
    stderr: EventEmitter<"data">;
    pid: number | null;
    constructor(program: string, args?: string | string[]);
    /**
     * Creates a command to execute the given sidecar binary.
     *
     * @param program Binary name
     * @returns
     */
    static sidecar(program: string, args?: string | string[]): Command;
    spawn(): Promise<Child>;
    execute(): Promise<ChildProcess>;
}
/**
 * Opens a path or URL with the system's default app,
 * or the one specified with `openWith`.
 *
 * @param path the path or URL to open
 * @param [openWith] the app to open the file or URL with
 * @returns
 */
declare function open(path: string, openWith?: string): Promise<void>;
export { Command, Child, open };
